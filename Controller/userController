const User = require('../DataBase/Models/userModel');
const bcrypt = require("bcrypt");
const { compare } = require('bcrypt');
const jwt = require ("jsonwebtoken");
module.exports = {
    //create user
    createuser: async (req, res) => {
        const{firstName,lastName,cin,phone,email,password} =req.body

        if (!firstName || !lastName || !cin || !phone || !email || !password  ) {
            return res.status(400).json({ message: "Please enter all fields" });
        }

        try {
            const user = await User.findOne({ email });
            if (user) throw Error("Email already exists");
            const user2 = await User.findOne({cin})
            if (user2) throw Error("Cin already exists");
            const salt = await bcrypt.genSalt(10);
            if (!salt) throw Error("Something went wrong with bcrypt");

            const hash = await bcrypt.hash(password.toString(), salt);
            if (!hash) throw Error("Something went wrong hashing the password");

            const newUser = new User({firstName,lastName,cin,phone,email,password});


            const savedUser = await newUser.save();
        
          
            if (!savedUser) throw Error("Something went wrong saving the user");

            /* const token = jwt.sign({ id: savedUser._id }, JWT_SECRET, {
              expiresIn: 3600,
            }); */

            res.status(200).json({

                user: savedUser,
            });
        } catch (e) {
            res.status(400).json({ error: e.message });
        }
    },

  
    // authenticate :async (req, res) => {

    //     // Our login logic starts here
    //     try {
    //         // Get user input
    //         const { email, password } = req.body;

    //         // Validate user input
    //         if (!(email && password)) {
    //             res.status(420).send("All input is required");
    //         }
    //         // Validate if user exist in our database
    //         const user = await User.findOne({ email });
    //         console.log(user);
    //         if (user && (password ===user.password)) {
             
           

            

    //             // user
    //             res.status(200);
    //         }
    //         res.status(400).send("Invalid Credentials");
    //     } catch (err) {
    //         console.log(err);
    //     }
    //     // Our register logic ends here
    // },

    authenticate :async (req, res) => {

        // Our login logic starts here
        try {
            // Get user input
            const { email, password } = req.body;

            // Validate user input
            if (!(email && password)) {
                res.status(420).send("All input is required");
            }
            // Validate if user exist in our database
            const user = await User.findOne({ email });
            console.log(user);
            if (user && (password ===user.password)) {
             
           

           
         // Create token
                const token = jwt.sign(
                    { user_id: user._id, email },
                  "jwt-secret",
                    {
                        expiresIn: "2h",
                    }
                );

                // save user token
                user.token = token;

                // user
                res.status(200).json({token: token , user : user});
            }
            res.status(400).send("Invalid Credentials");
        } catch (err) {
            console.log(err);
        }
        // Our register logic ends here
    },
    
   
   
   
   
    updateuser: async (req,res)=>{
        User.findByIdAndUpdate({_id : req.params.id}, {$set : req.body},(err , user) => {
            if(!user){
                res.status(500).json({
                    message:"user is not updated" +err ,
                    data: null,
                });
            }else {
                res.status(200).json({
                    message:"user is successfully updated" ,
                    data: null,
                });
            }

        });
    



   
    },



    deleteuser: async (req,res)=>{
        User.findByIdAndDelete({_id : req.params.id},{$set : req.body},(err , user) => {
            if(!user){
                res.status(500).json({
                    message:"user is not deleted" +err ,
                    data: null,
                });
            }else {
                res.status(200).json({
                    message:"user is successfully deleted" ,
                    data: null,
                });
            }

        });
    



    },


    searchuser:(req, res) =>{
        try {
            // const  cont= User.find({firstName: req.params.firstName} , (err ,user)=>{// si on veut chercher par un filter comme le nom
                const  cont= User.find({} , (err ,user)=>{
                res.status(200).send(user)
            });
        } catch (e) {
            res.status(400).json({ error: e.message });
        }
    }



}
